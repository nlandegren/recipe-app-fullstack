name: build-deploy-azure-app
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v2

      - name: Set version label
        run: echo "RELEASE_VERSION=$(echo ${GIT_MESSAGE} | grep -Po '(?<=--version=)[^;]+')" >> $GITHUB_ENV
        env:
          GIT_MESSAGE: ${{github.event.head_commit.message}}

      - name: Test version label
        run: echo $RELEASE_VERSION

      - name: Install dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Restore Nuget packages
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-build
     
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
            username: ${{ secrets.DOCKER_HUB_USERNAME }}
            password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            #- name: Build the Docker Image and push to Docker Hub
            #uses: docker/build-push-action@v2.9.0
            #with:
            #push: true
            #tags: nlandegren/production:FromActions

      - name: Build the docker image
        run: docker build -t nlandegren/production:FromActions-$RELEASE_VERSION .

      - name: Push the docker image
        run: docker push nlandegren/production:FromActions-$RELEASE_VERSION

      - name: Install Open VPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Connect to VPN
        id: connect_vpn
        uses: "kota65535/github-openvpn-connect-action@v1"
        with:
          config_file: ./.github/vpn/config.ovpn
          username:  ${{ secrets.OVPN_USERNAME }}
          password: ${{ secrets.OPEN_VPN_PASSWORD }}
          client_key: ${{ secrets.OPEN_VPN_PRIVATE_KEY }}          

      - name: Check Connect VPN
        run: echo ${{ steps.connect_vpn.outputs.STATUS }}

      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: kubectl rollout restart deployment recipe-app

